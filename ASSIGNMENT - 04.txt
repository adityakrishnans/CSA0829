ASSIGNMENT - 04

----------------------------------------------------------------------------------------------------------------------------------------------

1. from collections import Counter

array = [1, 3, 2, 3, 4, 3, 2, 1, 5, 1]
frequency = Counter(array)

highest_frequency_element = max(frequency, key=frequency.get)
highest_frequency = frequency[highest_frequency_element]

print(f"The element with the highest frequency is {highest_frequency_element} with a frequency of {highest_frequency}.")

----------------------------------------------------------------------------------------------------------------------------------------------

2. sorted_array = [1, 2, 3, 4, 5, 6, 7]
mid_element = sorted_array[len(sorted_array) // 2] if sorted_array else None
print(f"The mid element is: {mid_element}")

----------------------------------------------------------------------------------------------------------------------------------------------

3. array1 = [1, 2, 3, 4, 5]
array2 = [4, 5, 6, 7, 8]

# Find the intersection using sets
intersection = list(set(array1).intersection(set(array2)))

print("Intersection:", intersection)

----------------------------------------------------------------------------------------------------------------------------------------------

4. import math

number = int(input("Enter a number: "))

if number < 0:
    print(f"{number} is not a perfect square.")
else:
    sqrt_n = math.isqrt(number)
    if sqrt_n * sqrt_n == number:
        print(f"{number} is a perfect square.")
    else:
        print(f"{number} is not a perfect square.")

----------------------------------------------------------------------------------------------------------------------------------------------

5. import math

number = int(input("Enter a number: "))

if number < 0:
    print(f"{number} is not a perfect square.")
else:
    sqrt_n = math.isqrt(number)
    if sqrt_n * sqrt_n == number:
        print(f"{number} is a perfect square.")
    else:
        print(f"{number} is not a perfect square.")

----------------------------------------------------------------------------------------------------------------------------------------------

6. import sys

n = int(sys.argv[1]) if len(sys.argv) > 1 else 5  # Default to 5 steps

# Dynamically calculate the number of ways
a, b = 1, 1
for _ in range(n):
    a, b = b, a + b

print(f"Number of ways to climb {n} steps: {a}")

----------------------------------------------------------------------------------------------------------------------------------------------

7. n = int(input("Enter a number: "))
lucky = list(range(1, n + 1))
i = 2

while i <= len(lucky):
    lucky = [lucky[j] for j in range(len(lucky)) if (j + 1) % i != 0]
    i += 1

print(f"{n} is a lucky number." if n in lucky else f"{n} is not a lucky number.")

----------------------------------------------------------------------------------------------------------------------------------------------

8.m = int(input("Enter the number of vehicles (m): "))
n = int(input("Enter the number of children (n): "))
x = int(input("Enter the number of remaining vehicles to give to Peter (x): "))

if n > 0:
    vehicles_per_child = m // n
    remaining_vehicles = m % n
else:
    vehicles_per_child = 0
    remaining_vehicles = m

peter_vehicles = remaining_vehicles + x

if peter_vehicles % 2 == 0:
    luck_message = "Peter is luckier."
else:
    luck_message = "Peter is not luckier."

print(f"Vehicles each child gets: {vehicles_per_child}")
print(f"Remaining vehicles: {remaining_vehicles}")
print(f"Vehicles Peter gets: {peter_vehicles}")
print(luck_message)

----------------------------------------------------------------------------------------------------------------------------------------------

9. prices = [100, 180, 260, 310, 40, 535, 695]

first_buy = float('inf')
first_sell = 0
second_buy = float('inf')
second_sell = 0

for price in prices:
    first_buy = min(first_buy, price)  # Buy at the lowest price
    first_sell = max(first_sell, price - first_buy)  # Sell for maximum profit

    second_buy = min(second_buy, price - first_sell)  # Buy after first sell
    second_sell = max(second_sell, price - second_buy)  # Sell for maximum profit

max_profit = second_sell
print("Maximum profit from at most two transactions:", max_profit)


----------------------------------------------------------------------------------------------------------------------------------------------

10. nums = [7, 0, 1, 4, 4, 5, 6]  # Example rotated sorted array
n = len(nums)

left, right = 0, n - 1

while left < right:
    mid = left + (right - left) // 2
    if nums[mid] > nums[right]:
        left = mid + 1
    else:
        right = mid

min_element = nums[left]
print("The minimum element is:", min_element)

----------------------------------------------------------------------------------------------------------------------------------------------

11. nuhms = [1, 3, 20, 4, 1, 0]  # Example array
n = len(nuhms)

for i in range(n):
    if (i == 0 or nuhms[i] > nuhms[i - 1]) and (i == n - 1 or nuhms[i] > nuhms[i + 1]):
        peak_index = i
        break

print(peak_index)

----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
